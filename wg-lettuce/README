lettuce - A scalable Java Redis client

  Lettuce is a scalable thread-safe Redis client providing both synchronous and
  asyncronous connections. Multiple threads may share one connection provided
  they avoid blocking and transactional operations such as BLPOP, and MULTI/EXEC.
  Multiple connections are efficiently managed by the excellent netty NIO
  framework.

  This version of lettuce has been tested against redis 2.6-rc3 but should be
  backwards-compatible to older redis versions.

  Join the lambdaWorks-OSS Google Group to discuss this project:

    http://groups.google.com/group/lambdaworks-oss
    lambdaworks-oss@googlegroups.com

Basic Usage

  RedisClient client = new RedisClient("localhost")
  RedisConnection<String, String> connection = client.connect()
  String value = connection.get("key")

  Each redis command is implemented by one or more methods with names identical
  to the lowercase redis command name. Complex commands with multiple modifiers
  that change the result type include the CamelCased modifier as part of the
  command name, e.g. zrangebyscore and zrangebyscoreWithScores.

  Redis connections are designed to be long-lived, and if the connection is lost
  will reconnect until close() is called. Pending commands that have not timed
  out will be (re)sent after successful reconnection.

  All connections inherit a default timeout from their RedisClient and
  and will throw a RedisException when non-blocking commands fail to return a
  result before the timeout expires. The timeout defaults to 60 seconds and
  may be changed in the RedisClient or for each individual connection.

Asynchronous Connections

  RedisAsyncConnection<String, String> async = client.connectAsync()
  Future<String> set = async.set("key", "value")
  Future<String> get = async.get("key")

  async.awaitAll(set, get) == true

  set.get() == "OK"
  get.get() == "value"

Pub/Sub

  RedisPubSubConnection<String, String> connection = client.connectPubSub()
  connection.addListener(new RedisPubSubListener<String, String>() { ... })
  connection.subscribe("channel")

Codecs

  Lettuce supports pluggable codecs responsible for encoding and decoding keys
  and values. The default codec supports UTF-8 encoded String keys and values.

  Each connection may have its own codec passed to the extended
  RedisClient.connect methods:

  RedisConnection<K, V> connect(RedisCodec<K, V> codec)
  RedisAsyncConnection<K, V> connectAsync(RedisCodec<K, V> codec)
  RedisPubSubConnection<K, V> connectPubSub(RedisCodec<K, V> codec)

  For pub/sub connections channel names and patterns are treated as keys,
  messages are treated as values.

Maven Artifacts

  Releases of lettuce are available in the maven central repository.

  <dependency>
    <groupId>com.lambdaworks</groupId>
    <artifactId>lettuce</artifactId>
    <version>2.1.0</version>
  </dependency>
